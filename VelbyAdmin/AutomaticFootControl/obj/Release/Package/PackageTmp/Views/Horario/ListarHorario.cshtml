@model IEnumerable<AutomaticFootControl.Models.Horario.HorarioModel>
@using GridMvc.Html
@using AutomaticFootControl.Models

@using (Html.BeginForm("GestionHorario", "Horario", FormMethod.Post, new { @class = "", @data_toggle = "validator", @id = "frmListarHorario" }))
{
    <div class="row">
        <div class="col-md-8">
            <h4>Lista de Horarios</h4>
        </div>
    </div>
    @Html.AntiForgeryToken()
    if (ViewBag.ErrorGenerico != null && ViewBag.ErrorGenerico != "")
    {
        @Html.Raw(ViewBag.ErrorGenerico);
    }
    else
    {

        <div class="gestionHorario" id="tab1">
            <div class="card">
                <div class="body-tabla">
                    <div class="next">
                        <input class="btn btn-primary" type="submit" value="Nuevo" id="btnNuevoHorario" />
                    </div>

                    <div class="texto-centrado">
                        <div class="table-responsive">

                           @if (Model != null)
                           {
                                @Html.Grid(Model).Columns(Columns =>
                           {
                                   Columns.Add()
                                   .Encoded(false)
                                   .Sanitized(false)
                                   .SetWidth(30)
                                   .RenderValueAs(o => @<div class="icon"><i onclick="Editar(@Html.EncodedActionLink("DatoEncriptado", "Editar", "Horario", new { IdHorario = o.IdHorario } , null))" class="fa fa-pencil-square-o fa-2x Esperando" title="Editar"></i></div>);
                                   Columns.Add()
                                   .Encoded(false)
                                   .Sanitized(false)
                                   .SetWidth(50)
                                   .RenderValueAs(o => @<div class="icon"><i onclick="Eliminar(@Html.EncodedActionLink("DatoEncriptado", "Eliminar", "Horario", new { IdHorario = o.IdHorario }, null))" class="fa fa-times fa-2x" title="Eliminar"></i></div>);
                                   Columns.Add(c => c.NombreHorario).Titled("Nombre").Css("cabecera-grid").Filterable(true);
                                   Columns.Add(c => c.DescripcionHorario).Titled("Descripción").Css("cabecera-grid").Filterable(true);
                                   Columns.Add(c => c.ColorHorario).Titled("Color").Css("cabecera-grid").Filterable(true);
                                   Columns.Add(c => c.FechaInicioHorario).Titled("Fecha Inicio").Css("cabecera-grid").Filterable(true).Format(Constantes.FORMATO_FECHA_TABLA_DDMMYYY);
                                   Columns.Add(c => c.FechaFinHorario).Titled("Fecha Fin").Css("cabecera-grid").Filterable(true).Format(Constantes.FORMATO_FECHA_TABLA_DDMMYYY);
                                   Columns.Add(c => c.HoraInicioHorario).Titled("Hora Inicio").Css("cabecera-grid").Filterable(true).Format(Constantes.FORMATO_HORA_TABLA_HHMM);
                                   Columns.Add(c => c.HoraFinHorario).Titled("Hora Fin").Css("cabecera-grid").Filterable(true).Format(Constantes.FORMATO_HORA_TABLA_HHMM);
                               }).WithPaging(7).Sortable(true)
                            }
                            else
                            {
                                <div>
                                    <h5>No se puede obtener la información</h5>
                                </div>
                            }

                        </div>
                    </div>
                </div>

            </div>
        </div>
    }

}

<script>

    function Editar(urlEditar)
    {
        document.location = urlEditar;
    }

    function Eliminar(UrlEliminar)
    {
        varUrlEliminar = UrlEliminar;
        $('#IdEliminarRegistro').modal('show');
    }
</script>

